{"version":3,"sources":["constants/index.js","App.js","actions/RecipeActions.js","reducers/RecipeReducer.js","store.js","index.js"],"names":["GET_RECIPE_REQUEST","GET_RECIPE_ERROR","GET_RECIPE_SUCCESS","useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","App","classes","useState","search","setSearch","dispatch","useDispatch","useSelector","state","recipe","loading","recipes","Grid","container","justifyContent","item","xs","lg","md","sm","style","TextField","label","variant","InputProps","startAdornment","InputAdornment","position","fullWidth","onChange","e","target","value","Button","color","href","onClick","getState","a","type","payload","checkFetch","response","ok","alert","fetch","process","then","res","json","data","hits","catch","error","getRecipe","marginTop","CircularProgress","disableShrink","length","map","calories","Math","ceil","margin","Card","className","minWidth","CardHeader","action","IconButton","title","subheader","CardMedia","image","CardContent","ingredients","i","Typography","component","text","CardActions","disableSpacing","size","url","initialState","reducer","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.349a933f.chunk.js","sourcesContent":["export const GET_RECIPE_REQUEST = \"GET_RECIPE_REQUEST\";\r\nexport const GET_RECIPE_ERROR = \"GET_RECIPE_ERROR\";\r\nexport const GET_RECIPE_SUCCESS = \"GET_RECIPE_SUCCESS\";\r\n","import {\n    Button,\n    CardHeader,\n    Grid,\n    InputAdornment,\n    TextField,\n    Typography,\n    Card,\n    CircularProgress,\n    IconButton,\n    CardMedia,\n    CardContent,\n    CardActions,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport { red } from \"@material-ui/core/colors\";\nimport { getRecipe } from \"./actions/RecipeActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 0,\n        paddingTop: \"56.25%\", // 16:9\n    },\n    expand: {\n        transform: \"rotate(0deg)\",\n        marginLeft: \"auto\",\n        transition: theme.transitions.create(\"transform\", {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\",\n    },\n    avatar: {\n        backgroundColor: red[500],\n    },\n}));\n\nexport default function App() {\n    const classes = useStyles();\n\n    const [search, setSearch] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const { loading, recipes } = useSelector((state) => state.recipe);\n    const handleSubmit = () => {\n        dispatch(getRecipe(search));\n    };\n\n    return (\n        <Grid container={true} justifyContent=\"center\">\n            <Grid container={true} item={true} justifyContent=\"center\" xs={9}>\n                <Grid\n                    container={true}\n                    item={true}\n                    lg={4}\n                    md={6}\n                    sm={6}\n                    justifyContent=\"center\"\n                    style={{ paddingTop: 30 }}\n                >\n                    <Grid container={true} justifyContent=\"center\">\n                        <TextField\n                            label=\"Search a food you want to know...\"\n                            variant=\"outlined\"\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon />\n                                    </InputAdornment>\n                                ),\n                            }}\n                            fullWidth\n                            onChange={(e) => setSearch(e.target.value)}\n                        />\n                    </Grid>\n                    <Grid\n                        container={true}\n                        justifyContent=\"center\"\n                        style={{ paddingTop: 10 }}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            href=\"#contained-buttons\"\n                            fullWidth\n                            onClick={handleSubmit}\n                        >\n                            Search\n                        </Button>\n                    </Grid>\n                </Grid>\n                <Grid\n                    container={true}\n                    style={{ marginTop: 50 }}\n                    justifyContent=\"space-between\"\n                >\n                    {loading ? (\n                        <Grid\n                            container={true}\n                            item={true}\n                            justifyContent=\"center\"\n                            xs={12}\n                            style={{\n                                marginTop: 50,\n                            }}\n                        >\n                            <CircularProgress disableShrink />\n                        </Grid>\n                    ) : recipes.length ? (\n                        recipes.map((recipe) => {\n                            const calories = Math.ceil(recipe.recipe.calories);\n                            return (\n                                <Grid\n                                    container={true}\n                                    item={true}\n                                    justifyContent=\"center\"\n                                    lg={4}\n                                    md={6}\n                                    sm={6}\n                                    xs={12}\n                                    style={{\n                                        margin: \"10px 0\",\n                                    }}\n                                >\n                                    <Card\n                                        className={classes.root}\n                                        style={{\n                                            minWidth: \"80%\",\n                                        }}\n                                    >\n                                        <CardHeader\n                                            action={\n                                                <IconButton aria-label=\"settings\">\n                                                    <MoreVertIcon />\n                                                </IconButton>\n                                            }\n                                            title={recipe.recipe.label}\n                                            subheader={`Calories ${calories}`}\n                                        />\n                                        <CardMedia\n                                            className={classes.media}\n                                            image={recipe.recipe.image}\n                                            title={recipe.recipe.label}\n                                        />\n                                        <CardContent>\n                                            {recipe.recipe.ingredients.map(\n                                                (ingredients, i) => (\n                                                    <Typography\n                                                        variant=\"body2\"\n                                                        color=\"textSecondary\"\n                                                        component=\"p\"\n                                                        key={i}\n                                                    >\n                                                        {ingredients.text}\n                                                    </Typography>\n                                                )\n                                            )}\n                                        </CardContent>\n                                        <CardActions disableSpacing>\n                                            <Button\n                                                size=\"small\"\n                                                color=\"primary\"\n                                                href={recipe.recipe.url}\n                                                target=\"_blank\"\n                                            >\n                                                How to cook\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            );\n                        })\n                    ) : (\n                        <Grid\n                            container={true}\n                            item={true}\n                            justifyContent=\"center\"\n                            xs={12}\n                            style={{\n                                marginTop: 50,\n                            }}\n                        >\n                            <Typography variant=\"h2\" component=\"h2\">\n                                No recipes .....\n                            </Typography>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import {\r\n    GET_RECIPE_ERROR,\r\n    GET_RECIPE_REQUEST,\r\n    GET_RECIPE_SUCCESS,\r\n} from \"../constants\";\r\n\r\nexport const getRecipe = (search) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: GET_RECIPE_REQUEST,\r\n        payload: {\r\n            loading: true,\r\n        },\r\n    });\r\n    let checkFetch = (response) => {\r\n        if (!response.ok) {\r\n            throw alert(\"Please enter a food name.\");\r\n        }\r\n        return response;\r\n    };\r\n    fetch(\r\n        `https://api.edamam.com/search?q=${search}&app_id=${process.env.REACT_APP_EDAMAM_ID}&app_key=${process.env.REACT_APP_EDAMAM_KEY}`\r\n    )\r\n        .then(checkFetch)\r\n        .then((res) => res.json())\r\n        .then((data) =>\r\n            dispatch({\r\n                type: GET_RECIPE_SUCCESS,\r\n                payload: {\r\n                    loading: false,\r\n                    recipes: data.hits,\r\n                },\r\n            })\r\n        )\r\n        .catch((e) =>\r\n            dispatch({\r\n                type: GET_RECIPE_ERROR,\r\n                payload: {\r\n                    loading: false,\r\n                    error: e,\r\n                },\r\n            })\r\n        );\r\n};\r\n","import {\r\n    GET_RECIPE_ERROR,\r\n    GET_RECIPE_SUCCESS,\r\n    GET_RECIPE_REQUEST,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    recipes: [],\r\n    error: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_RECIPE_REQUEST:\r\n        case GET_RECIPE_ERROR:\r\n        case GET_RECIPE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport RecipeReducer from \"./reducers/RecipeReducer\";\r\n\r\nconst initialState = {};\r\n\r\nconst reducer = combineReducers({\r\n    recipe: RecipeReducer,\r\n});\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}